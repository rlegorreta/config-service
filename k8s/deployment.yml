# This is demo how to store a Config server in Kubernetes. In reality we are using Kuberntes ConfigMap
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-service
  labels:                     # Set of labels attached to the Deployment
    app: config-service       # This Deployment is labeled with "app=config-service"
spec:
  replicas: 1
  selector:                   # Defines the labels used to select the Pods to be scaled
    matchLabels:
      app: config-service
  template:                   # The template for creating a Pod
    metadata:
      labels:                 # Labels attached to the Pod object. They should match the ones used as selectors.
        app: config-service
    spec:
      containers:                   # The list of containers in the Pod (one in this case)
        - name: config-service      # The name of the Pod
          image: docker.io/ailegorreta/config-service    # The image used to run the container. No tag is defined, so “latest” will be used implicitly.
          imagePullPolicy: IfNotPresent # Instructs Kubernetes to pull the image from a container registry only if it’s not present locally yet
          lifecycle:                # Makes Kubernetes wait 5 seconds before sending the SIGTERM signal to the Pod
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 5" ]
          ports:
            - containerPort: 8071   # The ports exposed by the container
          env:
            - name: BPL_JVM_THREAD_COUNT # A Paketo Buildpacks environment variable to configure the number of threads for memory calculation
              value: "50"
